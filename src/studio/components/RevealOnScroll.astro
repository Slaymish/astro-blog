---
/**
 * RevealOnScroll Component
 * Reveals slotted content when it enters the viewport
 */

interface Props {
  effect?: 'fade' | 'slide-left' | 'slide-right' | 'rise';
  once?: boolean;
  threshold?: number;      // IntersectionObserver threshold (0..1)
  rootMargin?: string;     // e.g., '0px 0px -10% 0px'
  distance?: string;       // e.g., '16px'
  duration?: number;       // ms
  delay?: number;          // ms
}

const {
  effect = 'rise',
  once = true,
  threshold = 0.15,
  rootMargin = '0px 0px -10% 0px',
  distance = '16px',
  duration = 500,
  delay = 0,
} = Astro.props;

const uid = `ros-${Math.random().toString(36).slice(2, 9)}`;
---

<div 
  id={uid}
  class={`ros ros-${effect}`}
  style={`--ros-distance:${distance}; --ros-duration:${duration}ms; --ros-delay:${delay}ms;`}
  data-once={once ? 'true' : 'false'}
  data-threshold={threshold}
  data-root-margin={rootMargin}
>
  <slot />
  
  <script>
    (function () {
      const id = "{uid}";
      function supportsReducedMotion() {
        return window.matchMedia && window.matchMedia('(prefers-reduced-motion: reduce)').matches;
      }

      function init() {
        const el = document.getElementById(id);
        if (!el) return;

        // If reduced motion, reveal immediately
        if (supportsReducedMotion()) {
          el.classList.add('is-visible');
          return;
        }

        const once = el.dataset.once === 'true';
        const threshold = Number(el.dataset.threshold || 0.15);
        const rootMargin = el.dataset.rootMargin || '0px 0px -10% 0px';

        const observer = new IntersectionObserver((entries) => {
          entries.forEach((entry) => {
            if (entry.isIntersecting) {
              el.classList.add('is-visible');
              if (once) observer.unobserve(el);
            } else if (!once) {
              el.classList.remove('is-visible');
            }
          });
        }, { threshold, rootMargin });

        observer.observe(el);
      }

      if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', init, { once: true });
      } else {
        init();
      }
    })();
  </script>
</div>

<style>
  .ros {
    will-change: transform, opacity;
    opacity: 0;
    transition: transform var(--ros-duration, var(--studio-motion-duration)) var(--studio-motion-ease),
                opacity var(--ros-duration, var(--studio-motion-duration)) var(--studio-motion-ease);
    transition-delay: var(--ros-delay, 0ms);
  }

  /* Effects initial state */
  .ros-fade { transform: none; }
  .ros-slide-left { transform: translateX(calc(var(--ros-distance, 16px) * -1)); }
  .ros-slide-right { transform: translateX(var(--ros-distance, 16px)); }
  .ros-rise { transform: translateY(var(--ros-distance, 16px)); }

  /* Visible state */
  .ros.is-visible {
    opacity: 1;
    transform: none;
  }

  @media (prefers-reduced-motion: reduce) {
    .ros {
      transition: none !important;
      opacity: 1;
      transform: none !important;
    }
  }
</style>
