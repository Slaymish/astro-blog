---
/**
 * DefinitionPopover
 * Inline term with an expandable popover for definition, etymology, and notes.
 * Defaults to click-to-open (good for mobile). Hover can be enabled via prop.
 */

interface Props {
  term: string;
  subtitle?: string;              // Optional short gloss appearing in the header
  id?: string;
  trigger?: 'click' | 'hover';    // default: click
  placement?: 'auto' | 'side' | 'below'; // default: auto
}

const {
  term,
  subtitle,
  id,
  trigger = 'click',
  placement = 'auto',
} = Astro.props;

const popId = id || `def-${Math.random().toString(36).slice(2, 10)}`;
---

<span class="def-popover-wrapper" data-trigger={trigger} data-placement-prop={placement} id={`${popId}-wrapper`}>
  <button 
    type="button" 
    class="def-trigger" 
    aria-expanded="false"
    aria-controls={`${popId}-panel`}
  >
    <span class="def-term">{term}</span>
  </button>
  
  <span 
    class="def-panel" 
    id={`${popId}-panel`} 
    role="note"
    aria-labelledby={`${popId}-title`}
    hidden
  >
    <strong class="def-title" id={`${popId}-title`}>{term}</strong>
    {subtitle && (<em class="def-subtitle">{subtitle}</em>)}
    <div class="def-content">
      <slot />
    </div>
  </span>

  <script>
    (function () {
      const wrapId = "{popId}-wrapper";
      function init() {
        const root = document.getElementById(wrapId);
        if (!root) return;
        const trigger = root.querySelector('.def-trigger') as HTMLButtonElement | null;
        const panel = root.querySelector('.def-panel') as HTMLElement | null;
        if (!trigger || !panel) return;

        function computePlacement() {
          const r = root as HTMLSpanElement;
          const prop = r.dataset.placementProp || 'auto';
          if (prop !== 'auto') return prop;
          const rect = r.getBoundingClientRect();
          const vw = window.innerWidth || document.documentElement.clientWidth;
          const rightSpace = vw - rect.right;
          // Prefer side on larger screens when there's room
          if (vw >= 1024 && rightSpace > 260) return 'side';
          return 'below';
        }

        function openPanel() {
          const placement = computePlacement();
          (root as HTMLSpanElement).dataset.placement = placement;
          (panel as HTMLElement).removeAttribute('hidden');
          // reflow to enable transition
          void (panel as HTMLElement).offsetWidth;
          (panel as HTMLElement).classList.add('is-visible');
          (trigger as HTMLButtonElement).setAttribute('aria-expanded', 'true');
        }

        function closePanel() {
          (panel as HTMLElement).classList.remove('is-visible');
          (panel as HTMLElement).setAttribute('hidden', '');
          (trigger as HTMLButtonElement).setAttribute('aria-expanded', 'false');
        }

        function togglePanel() {
          const expanded = (trigger as HTMLButtonElement).getAttribute('aria-expanded') === 'true';
          if (expanded) closePanel();
          else {
            // Close other open definition popovers on the page
            document.querySelectorAll('.def-popover-wrapper .def-trigger[aria-expanded="true"]').forEach((btn) => {
              const b = btn as HTMLButtonElement;
              const wrap = b.closest('.def-popover-wrapper');
              const pnl = wrap?.querySelector('.def-panel') as HTMLElement | null;
              if (pnl) {
                pnl.classList.remove('is-visible');
                pnl.setAttribute('hidden', '');
                b.setAttribute('aria-expanded', 'false');
              }
            });
            openPanel();
          }
        }

        const trigMode = root.dataset.trigger || 'click';
        if (trigMode === 'hover') {
          let hoverTimer: number | null = null;
          root.addEventListener('mouseenter', () => {
            if (hoverTimer) window.clearTimeout(hoverTimer);
            openPanel();
          });
          root.addEventListener('mouseleave', () => {
            hoverTimer = window.setTimeout(() => closePanel(), 100);
          });
        } else {
          trigger.addEventListener('click', (e) => {
            e.preventDefault();
            togglePanel();
          });
        }

        // Close on outside click
        document.addEventListener('click', (e) => {
          const t = e.target as HTMLElement;
          if (!t.closest(`#${wrapId}`)) {
            if ((trigger as HTMLButtonElement).getAttribute('aria-expanded') === 'true') closePanel();
          }
        });

        // Close on Escape
        document.addEventListener('keydown', (e) => {
          if (e.key === 'Escape' && (trigger as HTMLButtonElement).getAttribute('aria-expanded') === 'true') closePanel();
        });
      }

      if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', init, { once: true });
      } else {
        init();
      }
    })();
  </script>
</span>

<style>
  .def-popover-wrapper {
    position: relative;
    display: inline-block;
  }

  .def-trigger {
    background: none;
    border: none;
    color: var(--studio-text-primary);
    font: inherit;
    padding: 0 0.125rem;
    cursor: pointer;
    border-bottom: 1px dotted var(--studio-accent-dim);
    transition: color var(--studio-duration-fast) var(--studio-ease-out),
                border-color var(--studio-duration-fast) var(--studio-ease-out);
  }
  .def-trigger:hover,
  .def-trigger[aria-expanded="true"] {
    color: var(--studio-accent);
    border-bottom-color: var(--studio-accent);
  }

  .def-panel {
    position: absolute;
    min-width: 260px;
    max-width: 360px;
    background: var(--studio-bg-secondary);
    border: 1px solid var(--studio-border);
    border-radius: 6px;
    padding: var(--studio-space-4);
    box-shadow: 0 6px 24px rgba(0,0,0,0.35);
    color: var(--studio-text-secondary);
    z-index: 40;
    opacity: 0;
    transform: translateY(6px);
    transition: opacity var(--studio-duration-normal) var(--studio-ease-out),
                transform var(--studio-duration-normal) var(--studio-ease-out);
    /* Prevent invisible panel from intercepting clicks */
    pointer-events: none;
  }

  /* default hidden still occupies flow as absolute; allow transitions */
  .def-panel[hidden] { display: block; }
  .def-panel.is-visible { opacity: 1; transform: translateY(0); pointer-events: auto; }

  /* Placement logic */
  .def-popover-wrapper[data-placement="below"] .def-panel {
    top: calc(100% + 0.5rem);
    left: 0;
  }
  .def-popover-wrapper[data-placement="side"] .def-panel {
    top: -0.25rem;
    left: calc(100% + 1rem);
    transform: translateX(-6px);
  }
  .def-popover-wrapper[data-placement="side"] .def-panel.is-visible {
    transform: translateX(0);
  }

  .def-title {
    font-family: var(--studio-font-sans);
    color: var(--studio-text-primary);
    display: block;
    margin-bottom: var(--studio-space-2);
    letter-spacing: var(--studio-tracking-normal);
  }

  .def-subtitle {
    display: block;
    font-family: var(--studio-font-sans);
    color: var(--studio-text-muted);
    margin-bottom: var(--studio-space-3);
  }

  .def-content {
    font-family: var(--studio-font-serif);
    line-height: var(--studio-leading-relaxed);
  }

  @media (max-width: 1024px) {
    .def-panel {
      max-width: min(92vw, 360px);
    }
  }

  @media (prefers-reduced-motion: reduce) {
    .def-panel { transition: none; }
  }
</style>
