---
/**
 * Audio Player Component
 * Ambient audio for aphorisms - muted by default
 */

interface Props {
  src: string;
  title?: string;
  initialVolume?: number; // 0.0 - 1.0
}

const { src, title = 'Aphorism ambience', initialVolume = 0.6 } = Astro.props;
---

<div class="audio-player" data-initial-volume={String(initialVolume)}>
  <audio 
    class="audio-element" 
    src={src} 
    loop 
    preload="none"
    aria-label={title}
  ></audio>
  
  <button 
    type="button" 
    class="audio-toggle" 
    aria-label="Toggle audio"
    data-state="paused"
  >
    <span class="audio-icon audio-icon-play" aria-hidden="true">▸</span>
    <span class="audio-icon audio-icon-pause" aria-hidden="true">‖</span>
    <span class="audio-label">{title}</span>
  </button>
  
  <label class="audio-volume-wrap" aria-label="Volume">
    <input 
      type="range" 
      class="audio-volume" 
      min="0" 
      max="1" 
      step="0.01" 
      value={String(initialVolume)}
      aria-valuemin="0" 
      aria-valuemax="1"
      aria-valuenow={String(initialVolume)}
    />
  </label>
  
  <div class="audio-visualizer" aria-hidden="true">
    <span class="audio-bar"></span>
    <span class="audio-bar"></span>
    <span class="audio-bar"></span>
  </div>
</div>

<script>
  (function () {
    function initPlayers() {
      const players = document.querySelectorAll('.audio-player');

      players.forEach((playerEl) => {
        const audio = playerEl.querySelector('.audio-element');
        const toggle = playerEl.querySelector('.audio-toggle');
        const visualizer = playerEl.querySelector('.audio-visualizer');
        const volume = playerEl.querySelector('.audio-volume');
        if (!(audio instanceof HTMLAudioElement) || !(toggle instanceof HTMLButtonElement)) return;

        // Set initial volume from data attribute or input value
  const initial = parseFloat(playerEl.getAttribute('data-initial-volume') || (volume instanceof HTMLInputElement ? volume.value : '') || '0.6');
        if (!Number.isNaN(initial)) {
          audio.volume = Math.min(1, Math.max(0, initial));
          if (volume instanceof HTMLInputElement) {
            volume.value = String(audio.volume);
            volume.setAttribute('aria-valuenow', String(audio.volume));
          }
        }

        toggle.addEventListener('click', () => {
          if (audio.paused) {
            audio.play();
            toggle.dataset.state = 'playing';
            toggle.setAttribute('aria-pressed', 'true');
            if (visualizer) visualizer.classList.add('is-active');
          } else {
            audio.pause();
            toggle.dataset.state = 'paused';
            toggle.setAttribute('aria-pressed', 'false');
            if (visualizer) visualizer.classList.remove('is-active');
          }
        });

        // Volume input
        if (volume instanceof HTMLInputElement) {
          volume.addEventListener('input', () => {
            const v = parseFloat(volume.value);
            if (!Number.isNaN(v)) {
              audio.volume = Math.min(1, Math.max(0, v));
              volume.setAttribute('aria-valuenow', String(audio.volume));
            }
          });
        }

        // Handle audio end
        audio.addEventListener('ended', () => {
          toggle.dataset.state = 'paused';
          toggle.setAttribute('aria-pressed', 'false');
          if (visualizer) visualizer.classList.remove('is-active');
        });
      });
    }

    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', initPlayers, { once: true });
    } else {
      initPlayers();
    }
  })();
</script>

<style>
  .audio-player {
    position: fixed;
    bottom: var(--studio-space-6);
    right: var(--studio-space-6);
    display: flex;
    align-items: center;
    gap: var(--studio-space-3);
    padding: var(--studio-space-3) var(--studio-space-4);
    background-color: var(--studio-bg-secondary);
    border: 1px solid var(--studio-border);
    border-radius: 100px;
    backdrop-filter: blur(10px);
    z-index: 50;
    opacity: 0;
    animation: slideIn var(--studio-duration-slow) var(--studio-ease-out) 1s forwards;
  }

  @keyframes slideIn {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .audio-element {
    display: none;
  }

  .audio-toggle {
    display: flex;
    align-items: center;
    gap: var(--studio-space-2);
    background: none;
    border: none;
    color: var(--studio-text-secondary);
    font-family: var(--studio-font-sans);
    font-size: var(--studio-text-sm);
    cursor: pointer;
    padding: 0;
    transition: color var(--studio-duration-fast) var(--studio-ease-out);
  }

  .audio-toggle:hover {
    color: var(--studio-text-primary);
  }

  .audio-icon {
    width: 20px;
    height: 20px;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: var(--studio-text-base);
  }

  .audio-icon-play {
    display: block;
  }

  .audio-icon-pause {
    display: none;
  }

  .audio-toggle[data-state="playing"] .audio-icon-play {
    display: none;
  }

  .audio-toggle[data-state="playing"] .audio-icon-pause {
    display: block;
  }

  .audio-label {
    font-size: var(--studio-text-xs);
    letter-spacing: var(--studio-tracking-wide);
  }

  .audio-volume-wrap {
    display: inline-flex;
    align-items: center;
    height: 20px;
  }

  .audio-volume {
    -webkit-appearance: none;
    appearance: none;
    width: 110px;
    height: 4px;
    background: var(--studio-bg-tertiary);
    border-radius: 999px;
    outline: none;
    cursor: pointer;
  }

  .audio-volume::-webkit-slider-thumb {
    -webkit-appearance: none;
    appearance: none;
    width: 12px;
    height: 12px;
    border-radius: 50%;
    background: var(--studio-accent);
    border: 1px solid var(--studio-border);
    margin-top: -4px; /* center over track */
  }

  .audio-volume::-moz-range-thumb {
    width: 12px;
    height: 12px;
    border-radius: 50%;
    background: var(--studio-accent);
    border: 1px solid var(--studio-border);
  }

  .audio-visualizer {
    display: flex;
    align-items: center;
    gap: 3px;
    height: 16px;
  }

  .audio-bar {
    width: 3px;
    height: 4px;
    background-color: var(--studio-accent-dim);
    border-radius: 2px;
    transition: all var(--studio-duration-fast) var(--studio-ease-out);
  }

  .audio-visualizer.is-active .audio-bar {
    animation: pulse 1s ease-in-out infinite;
  }

  .audio-visualizer.is-active .audio-bar:nth-child(1) {
    animation-delay: 0s;
  }

  .audio-visualizer.is-active .audio-bar:nth-child(2) {
    animation-delay: 0.2s;
  }

  .audio-visualizer.is-active .audio-bar:nth-child(3) {
    animation-delay: 0.4s;
  }

  @keyframes pulse {
    0%, 100% {
      height: 4px;
      background-color: var(--studio-accent-dim);
    }
    50% {
      height: 16px;
      background-color: var(--studio-accent);
    }
  }

  @media (max-width: 640px) {
    .audio-player {
      bottom: var(--studio-space-4);
      right: var(--studio-space-4);
    }

    .audio-label {
      display: none;
    }

    .audio-volume {
      width: 80px;
    }
  }

  @media (prefers-reduced-motion: reduce) {
    .audio-player {
      animation: none;
      opacity: 1;
    }

    .audio-bar {
      animation: none !important;
    }
  }
</style>
