---
import Layout from "../components/Layout.astro";
import { supabase } from "../utils/database";
import type { PostWithTags } from "../../supabase/types";

export const prerender = false;

// Function to create a clean text preview from markdown
function createPreview(markdown: string, maxLength: number = 200): string {
  // Remove markdown syntax
  const cleanText = markdown
    .replace(/^---[\s\S]*?---/, '') // Remove frontmatter
    .replace(/#{1,6}\s+/g, '') // Remove headings
    .replace(/\*\*(.*?)\*\*/g, '$1') // Remove bold
    .replace(/\*(.*?)\*/g, '$1') // Remove italic
    .replace(/`(.*?)`/g, '$1') // Remove inline code
    .replace(/\[([^\]]+)\]\([^)]+\)/g, '$1') // Convert links to text
    .replace(/!\[([^\]]*)\]\([^)]+\)/g, '$1') // Remove images
    .replace(/>\s*/g, '') // Remove blockquotes
    .replace(/\n+/g, ' ') // Replace line breaks with spaces
    .replace(/\s+/g, ' ') // Normalize whitespace
    .trim();

  return cleanText.length > maxLength 
    ? cleanText.substring(0, maxLength - 3) + '...'
    : cleanText;
}

let posts: PostWithTags[] | null = null;
// let postsError;

// Fetch posts data from Supabase if connection is set up
if (supabase) {
  const { data } = await supabase
    .from("posts")
    .select(`
      *,
      post_tags(
        tags(
          id,
          name,
          slug
        )
      )
    `)
    .order("created_at", { ascending: false });
  posts = data as PostWithTags[] | null;
  // postsError = error;
}

const homeDescription = "Welcome to Hamish's blog - exploring software engineering, AI, mathematics, and technology. Discover insights on programming, machine learning, algorithms, and modern development practices.";
---

<Layout 
  title="Hamish's Blog" 
  description={homeDescription}
  canonicalURL={Astro.url.href}
>
  {
    supabase ? (
      posts ? (
        <>
          <section aria-labelledby="recent-posts-heading">
            <h1 id="recent-posts-heading" class="mb-12 fade-in gradient-text" style="color: var(--color-text-primary); font-family: var(--font-heading);">
              Recent Posts
            </h1>
            <div class="space-y-8" role="list">
              {posts?.map((post, index) => (
                <article 
                  role="listitem"
                  class={`pb-8 slide-in`}
                  style={`border-bottom: 1px solid var(--color-border-secondary); animation-delay: ${index * 0.1}s;`}
                  itemscope 
                  itemtype="http://schema.org/BlogPosting"
                >
                  <header>
                    <h2 class="text-2xl font-bold mb-2">
                      <a 
                        href={`/posts/${post.slug}`} 
                        style="color: var(--color-text-primary);" 
                        class="hover:underline"
                        itemprop="headline"
                      >
                        {post.title}
                      </a>
                    </h2>
                  </header>
                  
                  <div class="mb-4" style="color: var(--color-text-muted);">
                    <time 
                      datetime={post.created_at}
                      itemprop="datePublished"
                    >
                      {new Date(post.created_at).toLocaleDateString()}
                    </time>
                    <span itemprop="author" itemscope itemtype="http://schema.org/Person" style="display: none;">
                      <span itemprop="name">Hamish Burke</span>
                    </span>
                  </div>
                  
                  <div class="prose prose-invert max-w-none mb-4" style="color: var(--color-text-secondary);" itemprop="description">
                    {createPreview(post.content, 200)}
                  </div>
                  
                  {post.post_tags && post.post_tags.length > 0 && (
                    <div class="flex flex-wrap gap-2" role="list" aria-label="Post tags">
                      {post.post_tags.map((postTag) => (
                        <a
                          role="listitem"
                          href={`/tags/${postTag.tags.slug}`}
                          class="text-sm px-2 py-1 rounded hover:opacity-80 transition-all"
                          style="background-color: var(--color-tag-bg); color: var(--color-tag-text);"
                          itemprop="keywords"
                        >
                          {postTag.tags.name}
                        </a>
                      ))}
                    </div>
                  )}
                </article>
              ))}
            </div>
          </section>
        </>
      ) : (
        <div class="text-center py-12">
          <h1 class="text-4xl font-bold mb-4" style="color: var(--color-text-secondary);">Welcome to my blog!</h1>
          <p class="mb-8" style="color: var(--color-text-muted);">
            I'm currently setting up the database connection. Please check back soon!
          </p>
        </div>
      )
    ) : (
      <div class="text-center py-12">
        <h1 class="text-4xl font-bold mb-4" style="color: var(--color-text-secondary);">Welcome to my blog!</h1>
        <p class="mb-8" style="color: var(--color-text-muted);">
          I'm currently setting up the database connection. Please check back soon!
        </p>
      </div>
    )
  }
</Layout>
