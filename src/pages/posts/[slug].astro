---
import Layout from "../../components/Layout.astro";
import Breadcrumb from "../../components/Breadcrumb.astro";
import TableOfContents from "../../components/TableOfContents.astro";
import RelatedPosts from "../../components/RelatedPosts.astro";
import { supabase } from "../../utils/database";
import { calculateReadingTime } from "../../utils/reading-time";
import type { PostWithTags } from "../../../supabase/types";
import rehypeFormat from 'rehype-format'
import rehypeKatex from 'rehype-katex'
import rehypeRaw from 'rehype-raw'
import rehypeSlug from 'rehype-slug'
import rehypeStringify from 'rehype-stringify'
import remarkDirective from 'remark-directive'
import remarkFrontmatter from 'remark-frontmatter'
import remarkGfm from 'remark-gfm'
import remarkMath from 'remark-math'
import remarkParse from 'remark-parse'
import remarkRehype from 'remark-rehype'
import {unified} from 'unified'

const processor = unified()
  .use(remarkParse)
  .use(remarkDirective)
  .use(remarkFrontmatter)
  .use(remarkGfm)
  .use(remarkMath)
  .use(remarkRehype, {allowDangerousHtml: true})
  .use(rehypeRaw)
  .use(rehypeSlug)
  .use(rehypeKatex)
  .use(rehypeFormat)
  .use(rehypeStringify)


export const prerender = false;

const { slug } = Astro.params;

let post: PostWithTags | null = null;

if (supabase && slug) {
  const { data } = await supabase
    .from("posts")
    .select(`
      *,
      post_tags(
        tags(
          id,
          name,
          slug
        )
      )
    `)
    .eq("slug", slug)
    .single();
  
  post = data as PostWithTags | null;
}

if (!post) {
  return Astro.redirect("/404");
}

const file = await processor.process(post.content)
const htmlContent = String(file)

// Calculate reading time
const readingTime = calculateReadingTime(post.content);

// Extract description from content (first 160 characters, cleaned)
const textContent = post.content.replace(/[#*`\[\]]/g, '').trim();
const description = textContent.length > 160 
  ? textContent.substring(0, 157) + '...' 
  : textContent;

// Format dates for meta tags
const publishedTime = new Date(post.created_at).toISOString();
const modifiedTime = post.updated_at !== post.created_at 
  ? new Date(post.updated_at).toISOString() 
  : publishedTime;

// Get tag names
const tagNames = post.post_tags?.map((pt: any) => pt.tags.name) || [];
---

<Layout 
  title={post.title}
  description={description}
  article={true}
  publishedTime={publishedTime}
  modifiedTime={modifiedTime}
  tags={tagNames}
  canonicalURL={`${Astro.url.origin}/posts/${post.slug}`}
>
  <Breadcrumb items={[
    { name: "Posts", url: "/" },
    { name: post.title, url: `/posts/${post.slug}` }
  ]} />
  
  <article 
    class="max-w-4xl mx-auto"
    itemscope 
    itemtype="http://schema.org/BlogPosting"
  >
    <header class="mb-8">
      <h1 
        class="text-4xl font-bold mb-4" 
        style="color: var(--color-text-primary);"
        itemprop="headline"
      >
        {post.title}
      </h1>
      
      <div class="flex items-center gap-4 mb-4" style="color: var(--color-text-muted);">
        <time 
          datetime={post.created_at}
          itemprop="datePublished"
        >
          {new Date(post.created_at).toLocaleDateString("en-US", {
            year: "numeric",
            month: "long",
            day: "numeric"
          })}
        </time>
        
        <span>•</span>
        
        <time 
          itemprop="timeRequired" 
          datetime={`PT${readingTime.minutes}M`}
          title={`${readingTime.words} words`}
        >
          {readingTime.text}
        </time>
        
        {post.updated_at !== post.created_at && (
          <>
            <span>•</span>
            <span>
              Updated <time 
                datetime={post.updated_at}
                itemprop="dateModified"
              >
                {new Date(post.updated_at).toLocaleDateString("en-US", {
                  year: "numeric",
                  month: "long", 
                  day: "numeric"
                })}
              </time>
            </span>
          </>
        )}
        
        <!-- Hidden author info for schema -->
        <span itemprop="author" itemscope itemtype="http://schema.org/Person" style="display: none;">
          <span itemprop="name">Hamish Burke</span>
          <span itemprop="url">https://hamishburke.dev</span>
        </span>
        
        <!-- Hidden publisher info for schema -->
        <span itemprop="publisher" itemscope itemtype="http://schema.org/Person" style="display: none;">
          <span itemprop="name">Hamish Burke</span>
          <span itemprop="url">https://hamishburke.dev</span>
        </span>
      </div>
      {post.post_tags && post.post_tags.length > 0 && (
        <div class="flex flex-wrap gap-2 mb-8" role="list" aria-label="Article tags">
          {post.post_tags.map((postTag) => (
            <a
              role="listitem"
              href={`/tags/${postTag.tags.slug}`}
              class="text-sm px-3 py-1 rounded-full hover:opacity-80 transition-all"
              style="background-color: var(--color-tag-bg); color: var(--color-tag-text);"
              itemprop="keywords"
            >
              {postTag.tags.name}
            </a>
          ))}
        </div>
      )}
    </header>
    
    <TableOfContents content={post.content} />
    
    <div 
      class="prose prose-invert max-w-none" 
      set:html={htmlContent}
      itemprop="articleBody"
    >
    </div>
    
    <RelatedPosts 
      currentPostId={post.id}
      currentPostTags={tagNames}
    />
    
    <footer class="mt-12 pt-8" style="border-top: 1px solid var(--color-border-secondary);">
      <nav aria-label="Post navigation">
        <a href="/" style="color: var(--color-link);" class="hover:underline">
          ← Back to all posts
        </a>
      </nav>
    </footer>
  </article>
</Layout>
