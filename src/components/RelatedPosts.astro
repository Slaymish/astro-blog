---
import { supabase } from "../utils/database";
import type { PostWithTags } from "../../supabase/types";

interface Props {
  currentPostId: number;
  currentPostTags: string[];
  limit?: number;
}

const { currentPostId, currentPostTags, limit = 3 } = Astro.props;

let relatedPosts: PostWithTags[] = [];

if (supabase && currentPostTags.length > 0) {
  // Find posts that share tags with the current post
  const { data } = await supabase
    .from('posts')
    .select(`
      id,
      title,
      slug,
      created_at,
      post_tags!inner (
        tags (
          name,
          slug
        )
      )
    `)
    .neq('id', currentPostId)
    .limit(limit * 2); // Get more than needed to filter

  if (data) {
    // Score posts by shared tags
    const scoredPosts = data
      .map((post: any) => {
        const postTags = post.post_tags?.map((pt: any) => pt.tags.name) || [];
        const sharedTags = postTags.filter((tag: string) => currentPostTags.includes(tag));
        return {
          ...post,
          score: sharedTags.length
        };
      })
      .filter((post: any) => post.score > 0)
      .sort((a: any, b: any) => b.score - a.score)
      .slice(0, limit);

    relatedPosts = scoredPosts;
  }
}
---

{relatedPosts.length > 0 && (
    <div class="bg-white/50 dark:bg-slate-800/50 backdrop-blur-sm rounded-lg p-6 border border-slate-200/50 dark:border-slate-700/50" itemscope itemtype="https://schema.org/Article">
    <h2 class="text-xl font-semibold mb-4 text-slate-800 dark:text-slate-200" itemprop="headline">Related Posts</h2>
    <div class="space-y-4" itemprop="articleBody">
      {relatedPosts.map((post: any) => (
        <article class="border-l-2 border-primary/30 pl-4 py-2" itemscope itemtype="https://schema.org/BlogPosting">
          <h3 class="font-medium" itemprop="headline">
            <a 
              href={`/posts/${post.slug}`} 
              class="text-slate-800 dark:text-slate-200 hover:text-primary transition-colors duration-200"
              itemprop="url"
            >
              {post.title}
            </a>
          </h3>
          <time 
            datetime={new Date(post.created_at).toISOString()} 
            class="text-sm text-slate-600 dark:text-slate-400 block mt-1"
            itemprop="datePublished"
          >
            {new Date(post.created_at).toLocaleDateString()}
          </time>
        </article>
      ))}
    </div>
  </div>
)}
