---
interface Props {
  pdfPath: string;
  title: string;
}

const { pdfPath, title } = Astro.props;
---

<div class="pdf-viewer-wrapper">
  <!-- PDF Toolbar -->
  <div class="pdf-toolbar">
    <div class="toolbar-left">
      <button 
        id="prev-page" 
        class="toolbar-btn" 
        title="Previous page (←)"
        aria-label="Previous page"
      >
        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <polyline points="15 18 9 12 15 6"></polyline>
        </svg>
      </button>
      
      <div class="page-info">
        <span id="page-num">1</span>
        <span>/</span>
        <span id="page-count">--</span>
      </div>
      
      <button 
        id="next-page" 
        class="toolbar-btn"
        title="Next page (→)"
        aria-label="Next page"
      >
        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <polyline points="9 18 15 12 9 6"></polyline>
        </svg>
      </button>
    </div>

    <div class="toolbar-center">
      <button 
        id="zoom-out" 
        class="toolbar-btn"
        title="Zoom out"
        aria-label="Zoom out"
      >
        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <circle cx="11" cy="11" r="8"></circle>
          <line x1="8" y1="11" x2="14" y2="11"></line>
          <line x1="21" y1="21" x2="16.65" y2="16.65"></line>
        </svg>
      </button>
      
      <span id="zoom-level" class="zoom-display">100%</span>
      
      <button 
        id="zoom-in" 
        class="toolbar-btn"
        title="Zoom in"
        aria-label="Zoom in"
      >
        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <circle cx="11" cy="11" r="8"></circle>
          <line x1="11" y1="8" x2="11" y2="14"></line>
          <line x1="8" y1="11" x2="14" y2="11"></line>
          <line x1="21" y1="21" x2="16.65" y2="16.65"></line>
        </svg>
      </button>

      <button 
        id="zoom-reset" 
        class="toolbar-btn"
        title="Reset zoom"
        aria-label="Reset zoom"
      >
        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <path d="M3 12a9 9 0 0 1 9-9 9.75 9.75 0 0 1 6.74 2.74L21 8"></path>
          <path d="M21 3v5h-5"></path>
          <path d="M21 12a9 9 0 0 1-9 9 9.75 9.75 0 0 1-6.74-2.74L3 16"></path>
          <path d="M3 21v-5h5"></path>
        </svg>
      </button>
    </div>

    <div class="toolbar-right">
      <button 
        id="fullscreen-btn" 
        class="toolbar-btn"
        title="Fullscreen"
        aria-label="Toggle fullscreen"
      >
        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <path d="M8 3H5a2 2 0 0 0-2 2v3m18 0V5a2 2 0 0 0-2-2h-3m0 18h3a2 2 0 0 0 2-2v-3M3 16v3a2 2 0 0 0 2 2h3"></path>
        </svg>
      </button>
      
      <a 
        href={pdfPath}
        download
        class="toolbar-btn"
        title="Download PDF"
        aria-label="Download PDF"
      >
        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"></path>
          <polyline points="7 10 12 15 17 10"></polyline>
          <line x1="12" y1="15" x2="12" y2="3"></line>
        </svg>
      </a>
    </div>
  </div>

  <!-- PDF Canvas Container -->
  <div class="pdf-container">
    <div id="pdf-loading" class="pdf-loading">
      <div class="spinner"></div>
      <p>Loading PDF...</p>
    </div>
    
    <div id="pdf-error" class="pdf-error" style="display: none;">
      <svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <circle cx="12" cy="12" r="10"></circle>
        <line x1="12" y1="8" x2="12" y2="12"></line>
        <line x1="12" y1="16" x2="12.01" y2="16"></line>
      </svg>
      <p>Failed to load PDF</p>
      <a href={pdfPath} download class="error-download-btn">
        Download PDF instead
      </a>
    </div>
    
    <canvas id="pdf-canvas"></canvas>
  </div>
</div>

<!-- Load PDF.js from CDN FIRST -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.min.js" is:inline></script>

<script is:inline define:vars={{ pdfPath, title }}>
  // Wait for PDF.js to be loaded
  function initPDFViewer() {
    if (typeof window.pdfjsLib === 'undefined') {
      setTimeout(initPDFViewer, 100);
      return;
    }

    const pdfjsLib = window.pdfjsLib;
    pdfjsLib.GlobalWorkerOptions.workerSrc = 'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.worker.min.js';

    // State management
    let pdfDoc = null;
    let pageNum = 1;
    let pageRendering = false;
    let pageNumPending = null;
    let scale = 1.0;
    const MIN_SCALE = 0.5;
    const MAX_SCALE = 3.0;
    const SCALE_STEP = 0.25;

    // DOM elements
    const canvas = document.getElementById('pdf-canvas');
    const ctx = canvas.getContext('2d');
    const loadingEl = document.getElementById('pdf-loading');
    const errorEl = document.getElementById('pdf-error');
    const pageNumEl = document.getElementById('page-num');
    const pageCountEl = document.getElementById('page-count');
    const zoomLevelEl = document.getElementById('zoom-level');

    /**
     * Render the page
     */
    function renderPage(num) {
      pageRendering = true;
      
      pdfDoc.getPage(num).then(page => {
        // Calculate scale to fit container width on mobile
        const container = document.querySelector('.pdf-container');
        const containerWidth = container.clientWidth - 32; // Account for padding
        const viewport = page.getViewport({ scale: 1.0 });
        const scaleToFit = containerWidth / viewport.width;
        
        // Use the smaller of the user's scale or the scale needed to fit
        const effectiveScale = Math.min(scale, scaleToFit * 1.5);
        const scaledViewport = page.getViewport({ scale: effectiveScale });

        canvas.height = scaledViewport.height;
        canvas.width = scaledViewport.width;

        const renderContext = {
          canvasContext: ctx,
          viewport: scaledViewport
        };

        const renderTask = page.render(renderContext);

        renderTask.promise.then(() => {
          pageRendering = false;
          loadingEl.style.display = 'none';
          canvas.style.display = 'block';
          
          if (pageNumPending !== null) {
            renderPage(pageNumPending);
            pageNumPending = null;
          }
        });
      });

      pageNumEl.textContent = num;
    }

    /**
     * Queue page rendering if another page is being rendered
     */
    function queueRenderPage(num) {
      if (pageRendering) {
        pageNumPending = num;
      } else {
        renderPage(num);
      }
    }

    /**
     * Navigate to previous page
     */
    function onPrevPage() {
      if (pageNum <= 1) return;
      pageNum--;
      queueRenderPage(pageNum);
    }

    /**
     * Navigate to next page
     */
    function onNextPage() {
      if (pageNum >= pdfDoc.numPages) return;
      pageNum++;
      queueRenderPage(pageNum);
    }

    /**
     * Zoom in
     */
    function zoomIn() {
      if (scale >= MAX_SCALE) return;
      scale += SCALE_STEP;
      scale = Math.min(scale, MAX_SCALE);
      updateZoomDisplay();
      queueRenderPage(pageNum);
    }

    /**
     * Zoom out
     */
    function zoomOut() {
      if (scale <= MIN_SCALE) return;
      scale -= SCALE_STEP;
      scale = Math.max(scale, MIN_SCALE);
      updateZoomDisplay();
      queueRenderPage(pageNum);
    }

    /**
     * Reset zoom
     */
    function resetZoom() {
      scale = 1.0;
      updateZoomDisplay();
      queueRenderPage(pageNum);
    }

    /**
     * Update zoom display
     */
    function updateZoomDisplay() {
      zoomLevelEl.textContent = Math.round(scale * 100) + '%';
    }

    /**
     * Toggle fullscreen
     */
    function toggleFullscreen() {
      const wrapper = document.querySelector('.pdf-viewer-wrapper');
      
      if (!document.fullscreenElement) {
        wrapper.requestFullscreen().catch(err => {
          console.error('Error attempting to enable fullscreen:', err);
        });
      } else {
        document.exitFullscreen();
      }
    }

    // Event listeners
    document.getElementById('prev-page').addEventListener('click', onPrevPage);
    document.getElementById('next-page').addEventListener('click', onNextPage);
    document.getElementById('zoom-in').addEventListener('click', zoomIn);
    document.getElementById('zoom-out').addEventListener('click', zoomOut);
    document.getElementById('zoom-reset').addEventListener('click', resetZoom);
    document.getElementById('fullscreen-btn').addEventListener('click', toggleFullscreen);

    // Keyboard navigation
    document.addEventListener('keydown', (e) => {
      // Only handle if we're not in an input field
      if (e.target.tagName === 'INPUT' || e.target.tagName === 'TEXTAREA') return;
      
      switch(e.key) {
        case 'ArrowLeft':
          e.preventDefault();
          onPrevPage();
          break;
        case 'ArrowRight':
          e.preventDefault();
          onNextPage();
          break;
        case '+':
        case '=':
          e.preventDefault();
          zoomIn();
          break;
        case '-':
          e.preventDefault();
          zoomOut();
          break;
        case '0':
          e.preventDefault();
          resetZoom();
          break;
      }
    });

    // Load PDF
    pdfjsLib.getDocument(pdfPath).promise.then(pdf => {
      pdfDoc = pdf;
      pageCountEl.textContent = pdf.numPages;
      renderPage(pageNum);
    }).catch(error => {
      console.error('Error loading PDF:', error);
      loadingEl.style.display = 'none';
      errorEl.style.display = 'flex';
    });

    // Handle window resize
    let resizeTimeout;
    window.addEventListener('resize', () => {
      clearTimeout(resizeTimeout);
      resizeTimeout = setTimeout(() => {
        if (pdfDoc) {
          queueRenderPage(pageNum);
        }
      }, 250);
    });
  }

  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initPDFViewer);
  } else {
    initPDFViewer();
  }
</script><style>
  .pdf-viewer-wrapper {
    border: 1px solid var(--color-border-primary);
    border-radius: 8px;
    overflow: hidden;
    background: var(--color-bg-secondary);
  }

  .pdf-toolbar {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 0.75rem 1rem;
    background: var(--color-bg-primary);
    border-bottom: 1px solid var(--color-border-primary);
    gap: 1rem;
    flex-wrap: wrap;
  }

  .toolbar-left,
  .toolbar-center,
  .toolbar-right {
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .toolbar-btn {
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 0.5rem;
    background: transparent;
    border: 1px solid var(--color-border-secondary);
    border-radius: 4px;
    color: var(--color-text-primary);
    cursor: pointer;
    transition: all 0.2s ease;
    text-decoration: none;
  }

  .toolbar-btn:hover {
    background: var(--color-bg-secondary);
    border-color: var(--color-primary-500);
  }

  .toolbar-btn:focus-visible {
    outline: 2px solid var(--color-primary-500);
    outline-offset: 2px;
  }

  .toolbar-btn:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }

  .page-info {
    display: flex;
    align-items: center;
    gap: 0.25rem;
    padding: 0.5rem 0.75rem;
    background: var(--color-bg-secondary);
    border-radius: 4px;
    font-size: 0.875rem;
    color: var(--color-text-secondary);
    font-family: ui-monospace, monospace;
  }

  .zoom-display {
    min-width: 3.5rem;
    text-align: center;
    font-size: 0.875rem;
    color: var(--color-text-secondary);
    font-family: ui-monospace, monospace;
  }

  .pdf-container {
    position: relative;
    display: flex;
    align-items: center;
    justify-content: center;
    min-height: 600px;
    max-height: 80vh;
    overflow: auto;
    padding: 1rem;
    background: var(--color-bg-tertiary, #1a1a1a);
  }

  #pdf-canvas {
    display: none;
    max-width: 100%;
    height: auto;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
  }

  .pdf-loading,
  .pdf-error {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    gap: 1rem;
    color: var(--color-text-secondary);
  }

  .spinner {
    width: 48px;
    height: 48px;
    border: 4px solid var(--color-border-primary);
    border-top-color: var(--color-primary-500);
    border-radius: 50%;
    animation: spin 1s linear infinite;
  }

  @keyframes spin {
    to { transform: rotate(360deg); }
  }

  .pdf-error svg {
    color: var(--color-error, #ef4444);
  }

  .error-download-btn {
    display: inline-block;
    padding: 0.75rem 1.5rem;
    background: var(--color-primary-500);
    color: white;
    text-decoration: none;
    border-radius: 6px;
    font-weight: 500;
    transition: background-color 0.2s ease;
  }

  .error-download-btn:hover {
    background: var(--color-primary-600);
  }

  /* Fullscreen styles */
  .pdf-viewer-wrapper:fullscreen {
    background: #000;
  }

  .pdf-viewer-wrapper:fullscreen .pdf-container {
    max-height: calc(100vh - 60px);
    background: #000;
  }

  /* Mobile responsive */
  @media (max-width: 768px) {
    .pdf-toolbar {
      padding: 0.5rem;
      gap: 0.5rem;
    }

    .toolbar-left,
    .toolbar-center,
    .toolbar-right {
      gap: 0.25rem;
    }

    .toolbar-btn {
      padding: 0.4rem;
    }

    .toolbar-btn svg {
      width: 18px;
      height: 18px;
    }

    .page-info,
    .zoom-display {
      font-size: 0.75rem;
    }

    .pdf-container {
      min-height: 400px;
      padding: 0.5rem;
    }

    /* Stack toolbar on very small screens */
    @media (max-width: 480px) {
      .pdf-toolbar {
        flex-direction: column;
      }

      .toolbar-left,
      .toolbar-center,
      .toolbar-right {
        width: 100%;
        justify-content: center;
      }
    }
  }

  /* Reduce motion for accessibility */
  @media (prefers-reduced-motion: reduce) {
    .spinner {
      animation: none;
      border-top-color: var(--color-border-primary);
    }
  }
</style>
