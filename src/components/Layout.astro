---
import "../../src/styles/globals.css";
import Footer from "./Footer.astro";
import Header from "./Header.astro";
import ParticleBackground from "./ParticleBackground.astro";
import AnimatedBackground from "./AnimatedBackground.astro";
import ScrollProgress from "./ScrollProgress.astro";
import ThemeCustomizer from "./ThemeCustomizer.astro";

interface Props {
  title: string;
  description?: string;
  image?: string;
  article?: boolean;
  publishedTime?: string;
  modifiedTime?: string;
  tags?: string[];
  author?: string;
  canonicalURL?: string;
}

const { 
  title, 
  description = "Hamish's personal blog covering software engineering, AI, mathematics, and technology insights.",
  image = "/images/og-default.webp",
  article = false,
  publishedTime,
  modifiedTime,
  tags = [],
  author = "Hamish Burke",
  canonicalURL = Astro.url.href
} = Astro.props;

const siteTitle = "Hamish's Blog";
const fullTitle = title === siteTitle ? title : `${title} | ${siteTitle}`;
const siteURL = "https://hamishburke.dev"; // Update this to your actual domain
---

<!doctype html>
<html lang="en">
  <head>
    <!-- Critical theme initialization script (must be FIRST to prevent FOUC) -->
    <script is:inline>
      (function() {
        try {
          const savedTheme = localStorage.getItem('theme');
          const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
          const theme = savedTheme || (prefersDark ? 'dark' : 'light');
          
          // Apply theme class immediately
          if (theme === 'dark') {
            document.documentElement.classList.add('dark');
          } else {
            document.documentElement.classList.add('light');
          }
          
          // Also restore any saved custom colors immediately
          const savedColors = localStorage.getItem('customColors');
          if (savedColors) {
            try {
              const colors = JSON.parse(savedColors);
              const root = document.documentElement;
              Object.entries(colors).forEach(([key, value]) => {
                root.style.setProperty(key, value);
              });
            } catch (e) {
              // Silently fail if colors can't be parsed
            }
          }
        } catch (e) {
          // Fail silently if localStorage is not available
          // Default to system preference
          if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
            document.documentElement.classList.add('dark');
          } else {
            document.documentElement.classList.add('light');
          }
        }
      })();
    </script>
    
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    
    <!-- Basic Meta Tags -->
    <title>{fullTitle}</title>
    <meta name="description" content={description} />
    <meta name="author" content={author} />
    <link rel="canonical" href={canonicalURL} />
    <link rel="alternate" hreflang="en" href={canonicalURL} />
    <link rel="alternate" hreflang="x-default" href={canonicalURL} />
    
    <!-- Google Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&family=JetBrains+Mono:wght@400;500;600&family=Playfair+Display:wght@400;500;600;700&family=Crimson+Text:wght@400;600;700&family=Source+Sans+Pro:wght@300;400;600;700&family=Source+Code+Pro:wght@400;500;600&family=Merriweather:wght@300;400;700&family=Open+Sans:wght@300;400;600;700&family=Fira+Code:wght@400;500;600&display=swap" rel="stylesheet">
    
    <!-- Open Graph / Facebook -->
    <meta property="og:type" content={article ? "article" : "website"} />
    <meta property="og:url" content={canonicalURL} />
    <meta property="og:title" content={fullTitle} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content={`${siteURL}${image}`} />
    <meta property="og:site_name" content={siteTitle} />
    
    <!-- Twitter Card -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:url" content={canonicalURL} />
    <meta name="twitter:title" content={fullTitle} />
    <meta name="twitter:description" content={description} />
    <meta name="twitter:image" content={`${siteURL}${image}`} />
    <meta name="twitter:creator" content="@slaymishh" />
    
    <!-- Article-specific meta tags -->
    {article && publishedTime && <meta property="article:published_time" content={publishedTime} />}
    {article && modifiedTime && <meta property="article:modified_time" content={modifiedTime} />}
    {article && author && <meta property="article:author" content={author} />}
    {article && tags.map(tag => <meta property="article:tag" content={tag} />)}
    
    <!-- Structured Data for LLMs and Search Engines -->
    <script type="application/ld+json" is:inline set:html={JSON.stringify({
      "@context": "https://schema.org",
      "@type": article ? "BlogPosting" : "WebSite",
      "headline": title,
      "description": description,
      "url": canonicalURL,
      "author": {
        "@type": "Person",
        "name": author,
        "url": siteURL,
        "sameAs": [
          "https://github.com/Slaymish",
          "https://linkedin.com/in/hamish-burke",
          "https://instagram.com/hamishbuuuurke"
        ]
      },
      "publisher": {
        "@type": "Person",
        "name": author,
        "url": siteURL,
        "sameAs": [
          "https://github.com/Slaymish",
          "https://linkedin.com/in/hamish-burke"
        ]
      },
      "image": `${siteURL}${image}`,
      ...(article && publishedTime ? { "datePublished": publishedTime } : {}),
      ...(article && modifiedTime ? { "dateModified": modifiedTime } : {}),
      ...(article && tags.length > 0 ? { "keywords": tags.join(", ") } : {}),
      "mainEntityOfPage": {
        "@type": "WebPage",
        "@id": canonicalURL
      },
      ...(article ? {} : {
        "potentialAction": {
          "@type": "SearchAction",
          "target": `${siteURL}/search?q={search_term_string}`,
          "query-input": "required name=search_term_string"
        }
      })
    })} />
    
    <!-- Additional Person/Organization Schema -->
    <script type="application/ld+json" is:inline set:html={JSON.stringify({
      "@context": "https://schema.org",
      "@type": "Person",
      "name": "Hamish Burke",
      "url": siteURL,
      "jobTitle": "Software Engineer",
      "description": "Software engineer passionate about AI, mathematics, and technology",
      "sameAs": [
        "https://github.com/Slaymish",
        "https://linkedin.com/in/hamish-burke",
        "https://instagram.com/hamishbuuuurke"
      ],
      "knowsAbout": [
        "Software Engineering",
        "Artificial Intelligence",
        "Mathematics",
        "Machine Learning",
        "Programming",
        "Technology"
      ]
    })} />
    
    <!-- Additional meta for LLMs -->
    <meta name="robots" content="index, follow, max-image-preview:large, max-snippet:-1, max-video-preview:-1" />
    <meta name="googlebot" content="index, follow" />
    
    <!-- Performance and Security -->
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="format-detection" content="telephone=no" />
    <meta name="theme-color" content="#10b981" />
    <meta name="msapplication-TileColor" content="#10b981" />
    
    <!-- Preconnect to external domains for faster loading -->
    <link rel="preconnect" href="https://cdn.jsdelivr.net" crossorigin />
    <link rel="dns-prefetch" href="https://cdn.jsdelivr.net" />
    
    <!-- Favicon and Icons -->
    <link rel="icon" type="image/x-icon" href="/favicon.ico" />
    <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.webp" />
    <link rel="manifest" href="/site.webmanifest" />
    
    <!-- RSS Feed -->
    <link rel="alternate" type="application/rss+xml" title="Hamish's Blog RSS Feed" href="/rss.xml" />
    
    <!-- KaTeX CSS -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/katex@0.16.9/dist/katex.min.css" integrity="sha384-n8MVd4RsNIU0tAv4ct0nTaAbDJwPJzDEaqSD1odI+WdtXRGWt2kTvGFasHpSy3SV" crossorigin="anonymous">
  </head>
  <body class="px-4 antialiased sm:px-8" style="background-color: var(--color-bg-secondary); color: var(--color-text-primary);">
    <ScrollProgress />
    <AnimatedBackground />
    <ParticleBackground />
    <ThemeCustomizer />
    <Header />
    <main class="w-full max-w-4xl mx-auto grow">
      <slot />
    </main>
    <Footer />
  </body>
</html>
