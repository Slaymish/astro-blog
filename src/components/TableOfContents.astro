---
interface TocItem {
  id: string;
  text: string;
  level: number;
}

interface Props {
  content: string;
  htmlContent?: string; // Add optional processed HTML
  minItems?: number;
}

const { content, htmlContent, minItems = 3 } = Astro.props;

// Extract headings from processed HTML if available, otherwise fall back to markdown
function extractTableOfContents(markdown: string, html?: string): TocItem[] {
  const toc: TocItem[] = [];
  
  if (html) {
    // Extract from processed HTML - this ensures perfect ID matching
    const headingRegex = /<h([2-4])[^>]*id="([^"]*)"[^>]*>(.*?)<\/h[2-4]>/gi;
    let match;
    
    while ((match = headingRegex.exec(html)) !== null) {
      const level = parseInt(match[1]);
      const id = match[2];
      const rawText = match[3];
      
      // Clean up the text content (remove HTML tags)
      const text = rawText
        .replace(/<[^>]*>/g, '') // Remove HTML tags
        .replace(/&lt;/g, '<')
        .replace(/&gt;/g, '>')
        .replace(/&amp;/g, '&')
        .replace(/&quot;/g, '"')
        .replace(/&#39;/g, "'")
        .trim();
      
      if (level >= 2 && level <= 4 && id && text) {
        toc.push({ id, text, level });
      }
    }
  } else {
    // Fallback to markdown parsing if no HTML provided
    const headingRegex = /^(#{1,6})\s+(.+)$/gm;
    let match;

    while ((match = headingRegex.exec(markdown)) !== null) {
      const level = match[1].length;
      const text = match[2].trim();
      
      // Simple ID generation for fallback
      const id = text
        .toLowerCase()
        .replace(/\*\*(.*?)\*\*/g, '$1')
        .replace(/\*(.*?)\*/g, '$1')
        .replace(/`(.*?)`/g, '$1')
        .replace(/\[([^\]]+)\]\([^)]+\)/g, '$1')
        .trim()
        .replace(/\s+/g, '-')
        .replace(/[^\w-]/g, '')
        .replace(/^-+|-+$/g, '')
        .replace(/-+/g, '-');

      if (level >= 2 && level <= 4 && id) {
        toc.push({ id, text, level });
      }
    }
  }
  
  return toc;
}

const toc = extractTableOfContents(content, htmlContent);
const shouldShowToc = toc.length >= minItems;
---

{shouldShowToc && (
  <aside class="mb-8 p-6 rounded-lg" style="background-color: var(--color-bg-tertiary); border-left: 3px solid var(--color-primary-500);">
    <h2 class="text-lg font-semibold mb-4" style="color: var(--color-text-primary);">
      Table of Contents
    </h2>
    <nav aria-label="Table of contents">
      <ol class="space-y-2" role="list">
        {toc.map((item) => (
          <li 
            role="listitem"
            class={`text-sm ${item.level === 2 ? 'ml-0' : item.level === 3 ? 'ml-4' : 'ml-8'}`}
          >
            <a 
              href={`#${item.id}`}
              style="color: var(--color-link);"
              class="hover:underline block py-1"
            >
              {item.text}
            </a>
          </li>
        ))}
      </ol>
    </nav>
  </aside>
)}
