---
// Color Palette Controller Component
---

<div id="color-controller" class="mt-8 p-4 rounded-lg border backdrop-blur-sm" style="border-color: var(--color-border-primary); background-color: var(--color-bg-tertiary); box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);">
  <details class="group">
    <summary class="cursor-pointer text-sm font-medium transition-all duration-300 hover:scale-105" style="color: var(--color-text-secondary);" onmouseover="this.style.color='var(--color-text-primary)'" onmouseout="this.style.color='var(--color-text-secondary)'">
      🎨 Customize Appearance
    </summary>
    
    <div class="mt-4 space-y-4">
      <!-- Primary Hue Control -->
      <div>
        <label for="hue-slider" class="block text-xs mb-2" style="color: var(--color-text-muted);">
          Primary Hue: <span id="hue-value">142</span>°
        </label>
        <input 
          type="range" 
          id="hue-slider" 
          min="0" 
          max="360" 
          value="142"
          class="w-full h-2 rounded-lg appearance-none cursor-pointer slider"
          style="background-color: var(--color-bg-secondary);"
        />
      </div>

      <!-- Saturation Control -->
      <div>
        <label for="saturation-slider" class="block text-xs mb-2" style="color: var(--color-text-muted);">
          Saturation: <span id="saturation-value">70</span>%
        </label>
        <input 
          type="range" 
          id="saturation-slider" 
          min="30" 
          max="100" 
          value="70"
          class="w-full h-2 rounded-lg appearance-none cursor-pointer slider"
          style="background-color: var(--color-bg-secondary);"
        />
      </div>

      <!-- Color Harmony Control -->
      <div>
        <label for="harmony-select" class="block text-xs mb-2" style="color: var(--color-text-muted);">
          Color Harmony:
        </label>
        <select 
          id="harmony-select"
          class="w-full p-2 text-sm rounded border focus:border-blue-500"
          style="background-color: var(--color-bg-secondary); color: var(--color-text-primary); border-color: var(--color-border-primary);"
        >
          <option value="monochromatic">Monochromatic</option>
          <option value="analogous" selected>Analogous</option>
          <option value="complementary">Complementary</option>
          <option value="triadic">Triadic</option>
          <option value="split-complementary">Split Complementary</option>
        </select>
      </div>

      <!-- Dark/Light Mode Toggle -->
      <div>
        <label class="block text-xs mb-2" style="color: var(--color-text-muted);">
          Theme Mode:
        </label>
        <button 
          id="theme-toggle"
          class="w-full p-2 text-sm rounded border transition-colors flex items-center justify-center gap-2"
          style="background-color: var(--color-bg-secondary); color: var(--color-text-primary); border-color: var(--color-border-primary);"
          onmouseover="this.style.backgroundColor='var(--color-bg-primary)'"
          onmouseout="this.style.backgroundColor='var(--color-bg-secondary)'"
        >
          <span id="theme-icon">🌙</span>
          <span id="theme-text">Dark Mode</span>
        </button>
      </div>

      <!-- Font Selection -->
      <div>
        <label for="font-select" class="block text-xs mb-2" style="color: var(--color-text-muted);">
          Font Style:
        </label>
        <select 
          id="font-select"
          class="w-full p-2 text-sm rounded border focus:border-blue-500"
          style="background-color: var(--color-bg-secondary); color: var(--color-text-primary); border-color: var(--color-border-primary);"
        >
          <option value="modern">Modern (Inter + Playfair)</option>
          <option value="classic">Classic (Georgia + Arial)</option>
          <option value="minimal">Minimal (System Sans)</option>
          <option value="editorial">Editorial (Crimson + Source Sans)</option>
          <option value="tech">Tech (SF Mono + Inter)</option>
          <option value="creative">Creative (Merriweather + Open Sans)</option>
        </select>
      </div>

      <!-- Font Size Control -->
      <div>
        <label for="font-size-slider" class="block text-xs mb-2" style="color: var(--color-text-muted);">
          Font Size: <span id="font-size-value">100</span>%
        </label>
        <input 
          type="range" 
          id="font-size-slider" 
          min="75" 
          max="150" 
          value="100"
          step="5"
          class="w-full h-2 rounded-lg appearance-none cursor-pointer slider"
          style="background-color: var(--color-bg-secondary);"
        />
      </div>

      <!-- Color Preview -->
      <div class="grid grid-cols-5 gap-2 mt-4">
        <div class="h-8 rounded" id="color-preview-1" style="background: hsl(142, 70%, 60%)"></div>
        <div class="h-8 rounded" id="color-preview-2" style="background: hsl(152, 70%, 55%)"></div>
        <div class="h-8 rounded" id="color-preview-3" style="background: hsl(162, 70%, 50%)"></div>
        <div class="h-8 rounded" id="color-preview-4" style="background: hsl(132, 70%, 45%)"></div>
        <div class="h-8 rounded" id="color-preview-5" style="background: hsl(122, 70%, 40%)"></div>
      </div>

      <!-- Reset Button -->
      <button 
        id="reset-colors"
        class="w-full mt-3 px-3 py-2 text-xs rounded transition-colors"
        style="background-color: var(--color-bg-secondary); color: var(--color-text-primary);"
        onmouseover="this.style.backgroundColor='var(--color-bg-primary)'"
        onmouseout="this.style.backgroundColor='var(--color-bg-secondary)'"
      >
        Reset to Defaults
      </button>
    </div>
  </details>
</div>

<script is:inline>
  // Color palette controller for dynamic theme switching
  function initColorController() {
    const controller = {
      // DOM elements
      hueSlider: document.getElementById('hue-slider'),
      saturationSlider: document.getElementById('saturation-slider'),
      harmonySelect: document.getElementById('harmony-select'),
      resetButton: document.getElementById('reset-colors'),
      themeToggle: document.getElementById('theme-toggle'),
      themeIcon: document.getElementById('theme-icon'),
      themeText: document.getElementById('theme-text'),
      fontSelect: document.getElementById('font-select'),
      fontSizeSlider: document.getElementById('font-size-slider'),
      fontSizeValue: document.getElementById('font-size-value'),
      hueValue: document.getElementById('hue-value'),
      saturationValue: document.getElementById('saturation-value'),
      
      // Default values
      defaultHue: 142,
      defaultSaturation: 70,
      
      // Initialize
      init() {
        this.previews = [
          document.getElementById('color-preview-1'),
          document.getElementById('color-preview-2'),
          document.getElementById('color-preview-3'),
          document.getElementById('color-preview-4'),
          document.getElementById('color-preview-5')
        ];

        this.hueSlider.addEventListener('input', () => this.updateColors());
        this.saturationSlider.addEventListener('input', () => this.updateColors());
        this.harmonySelect.addEventListener('change', () => this.updateColors());
        this.resetButton.addEventListener('click', () => this.resetColors());
        this.themeToggle.addEventListener('click', () => this.toggleTheme());
        this.fontSelect.addEventListener('change', () => this.updateFont());
        this.fontSizeSlider.addEventListener('input', () => this.updateFontSize());
        
        this.loadPreferences();
        this.updateColors();
        this.initTheme();
        this.initFont();
        this.initFontSize();
      },

      updateColors() {
        const hue = parseInt(this.hueSlider.value);
        const saturation = parseInt(this.saturationSlider.value);
        const harmony = this.harmonySelect.value;

        this.hueValue.textContent = hue.toString();
        this.saturationValue.textContent = saturation.toString();

        const colors = this.calculateColorHarmony(hue, saturation, harmony);
        this.applyColors(colors);
        this.updatePreview(colors);
        this.savePreferences();
      },

      calculateColorHarmony(baseHue, saturation, harmony) {
        const colors = {
          primary300: '',
          primary400: '',
          primary500: '',
          primary600: '',
          tag: ''
        };

        switch (harmony) {
          case 'monochromatic':
            colors.primary300 = `hsl(${baseHue}, ${saturation}%, 75%)`;
            colors.primary400 = `hsl(${baseHue}, ${saturation}%, 65%)`;
            colors.primary500 = `hsl(${baseHue}, ${saturation}%, 55%)`;
            colors.primary600 = `hsl(${baseHue}, ${saturation}%, 45%)`;
            colors.tag = `hsla(${baseHue}, ${saturation}%, 55%, 0.15)`;
            break;
            
          case 'analogous':
            colors.primary300 = `hsl(${(baseHue + 20) % 360}, ${saturation}%, 75%)`;
            colors.primary400 = `hsl(${(baseHue + 10) % 360}, ${saturation}%, 65%)`;
            colors.primary500 = `hsl(${baseHue}, ${saturation}%, 55%)`;
            colors.primary600 = `hsl(${(baseHue - 10 + 360) % 360}, ${saturation}%, 45%)`;
            colors.tag = `hsla(${baseHue}, ${saturation}%, 55%, 0.15)`;
            break;
            
          case 'complementary':
            const complementary = (baseHue + 180) % 360;
            colors.primary300 = `hsl(${baseHue}, ${saturation}%, 75%)`;
            colors.primary400 = `hsl(${baseHue}, ${saturation}%, 65%)`;
            colors.primary500 = `hsl(${baseHue}, ${saturation}%, 55%)`;
            colors.primary600 = `hsl(${complementary}, ${saturation}%, 45%)`;
            colors.tag = `hsla(${baseHue}, ${saturation}%, 55%, 0.15)`;
            break;
            
          case 'triadic':
            colors.primary300 = `hsl(${baseHue}, ${saturation}%, 75%)`;
            colors.primary400 = `hsl(${(baseHue + 120) % 360}, ${saturation}%, 65%)`;
            colors.primary500 = `hsl(${baseHue}, ${saturation}%, 55%)`;
            colors.primary600 = `hsl(${(baseHue + 240) % 360}, ${saturation}%, 45%)`;
            colors.tag = `hsla(${baseHue}, ${saturation}%, 55%, 0.15)`;
            break;
            
          case 'split-complementary':
            colors.primary300 = `hsl(${(baseHue + 150) % 360}, ${saturation}%, 75%)`;
            colors.primary400 = `hsl(${baseHue}, ${saturation}%, 65%)`;
            colors.primary500 = `hsl(${baseHue}, ${saturation}%, 55%)`;
            colors.primary600 = `hsl(${(baseHue + 210) % 360}, ${saturation}%, 45%)`;
            colors.tag = `hsla(${baseHue}, ${saturation}%, 55%, 0.15)`;
            break;
        }

        return colors;
      },

      applyColors(colors) {
        const root = document.documentElement;
        
        root.style.setProperty('--color-primary-300', colors.primary300);
        root.style.setProperty('--color-primary-400', colors.primary400);
        root.style.setProperty('--color-primary-500', colors.primary500);
        root.style.setProperty('--color-primary-600', colors.primary600);
        
        root.style.setProperty('--color-tag-bg', colors.tag);
        root.style.setProperty('--color-tag-bg-hover', colors.tag.replace('0.15', '0.25'));
        root.style.setProperty('--color-tag-text', colors.primary300);
        
        root.style.setProperty('--color-link', colors.primary400);
        root.style.setProperty('--color-link-hover', colors.primary300);
      },

      updatePreview(colors) {
        if (this.previews && this.previews.length === 5) {
          this.previews[0].style.background = colors.primary300;
          this.previews[1].style.background = colors.primary400;
          this.previews[2].style.background = colors.primary500;
          this.previews[3].style.background = colors.primary600;
          this.previews[4].style.background = colors.tag.replace('0.15', '1');
        }
      },

      resetColors() {
        this.hueSlider.value = this.defaultHue.toString();
        this.saturationSlider.value = this.defaultSaturation.toString();
        this.harmonySelect.value = 'analogous';
        this.fontSelect.value = 'modern';
        this.fontSizeSlider.value = '100';
        this.fontSizeValue.textContent = '100';
        this.updateColors();
        this.applyFont('modern');
        this.applyFontSize(100);
        localStorage.removeItem('colorPreferences');
        localStorage.removeItem('fontStyle');
        localStorage.removeItem('fontSize');
      },

      savePreferences() {
        const preferences = {
          hue: this.hueSlider.value,
          saturation: this.saturationSlider.value,
          harmony: this.harmonySelect.value
        };
        localStorage.setItem('colorPreferences', JSON.stringify(preferences));
      },

      loadPreferences() {
        const saved = localStorage.getItem('colorPreferences');
        if (saved) {
          try {
            const preferences = JSON.parse(saved);
            this.hueSlider.value = preferences.hue || this.defaultHue.toString();
            this.saturationSlider.value = preferences.saturation || this.defaultSaturation.toString();
            this.harmonySelect.value = preferences.harmony || 'analogous';
          } catch (e) {
            console.warn('Failed to load color preferences:', e);
          }
        }
      },

      initTheme() {
        const savedTheme = localStorage.getItem('theme');
        const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
        const theme = savedTheme || (prefersDark ? 'dark' : 'light');
        this.setTheme(theme);
      },

      toggleTheme() {
        const currentTheme = document.documentElement.classList.contains('dark') ? 'dark' : 'light';
        const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
        this.setTheme(newTheme);
      },

      setTheme(theme) {
        if (theme === 'dark') {
          document.documentElement.classList.add('dark');
          this.themeIcon.textContent = '🌙';
          this.themeText.textContent = 'Dark Mode';
        } else {
          document.documentElement.classList.remove('dark');
          this.themeIcon.textContent = '☀️';
          this.themeText.textContent = 'Light Mode';
        }
        localStorage.setItem('theme', theme);
      },

      // Font management methods
      fontStacks: {
        modern: {
          heading: "'Playfair Display', Georgia, serif",
          body: "'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, sans-serif",
          mono: "'JetBrains Mono', 'Fira Code', Consolas, monospace"
        },
        classic: {
          heading: "Georgia, 'Times New Roman', serif",
          body: "Arial, -apple-system, BlinkMacSystemFont, sans-serif",
          mono: "'Courier New', Courier, monospace"
        },
        minimal: {
          heading: "-apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, sans-serif",
          body: "-apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, sans-serif",
          mono: "'SF Mono', Monaco, 'Cascadia Code', monospace"
        },
        editorial: {
          heading: "'Crimson Text', Georgia, serif",
          body: "'Source Sans Pro', -apple-system, sans-serif",
          mono: "'Source Code Pro', monospace"
        },
        tech: {
          heading: "'SF Mono', 'JetBrains Mono', monospace",
          body: "'Inter', -apple-system, system-ui, sans-serif",
          mono: "'SF Mono', 'JetBrains Mono', monospace"
        },
        creative: {
          heading: "'Merriweather', Georgia, serif",
          body: "'Open Sans', -apple-system, sans-serif",
          mono: "'Fira Code', 'JetBrains Mono', monospace"
        }
      },

      initFont() {
        const savedFont = localStorage.getItem('fontStyle');
        const fontStyle = savedFont || 'modern';
        this.fontSelect.value = fontStyle;
        this.applyFont(fontStyle);
      },

      updateFont() {
        const fontStyle = this.fontSelect.value;
        this.applyFont(fontStyle);
        localStorage.setItem('fontStyle', fontStyle);
      },

      applyFont(fontStyle) {
        const fonts = this.fontStacks[fontStyle];
        if (fonts) {
          const root = document.documentElement;
          root.style.setProperty('--font-heading', fonts.heading);
          root.style.setProperty('--font-body', fonts.body);
          root.style.setProperty('--font-mono', fonts.mono);
        }
      },

      // Font size management methods
      initFontSize() {
        const savedSize = localStorage.getItem('fontSize');
        const fontSize = savedSize ? parseInt(savedSize) : 100;
        this.fontSizeSlider.value = fontSize.toString();
        this.fontSizeValue.textContent = fontSize.toString();
        this.applyFontSize(fontSize);
      },

      updateFontSize() {
        const fontSize = parseInt(this.fontSizeSlider.value);
        this.fontSizeValue.textContent = fontSize.toString();
        this.applyFontSize(fontSize);
        localStorage.setItem('fontSize', fontSize.toString());
      },

      applyFontSize(sizePercent) {
        const root = document.documentElement;
        const scaleFactor = sizePercent / 100;
        
        // Apply scaling to CSS custom properties for different text elements
        root.style.setProperty('--font-scale', scaleFactor.toString());
        
        // Update specific font sizes
        root.style.fontSize = `${16 * scaleFactor}px`; // Base font size
        
        // You can also update specific elements if needed
        const elements = [
          { selector: '.prose p', baseFontSize: 17 },
          { selector: '.prose h1', baseFontSize: 40 },
          { selector: '.prose h2', baseFontSize: 32 },
          { selector: '.prose h3', baseFontSize: 26 },
          { selector: '.prose h4', baseFontSize: 22 },
          { selector: '.prose h5', baseFontSize: 20 },
          { selector: '.prose h6', baseFontSize: 16 },
          { selector: '.prose li', baseFontSize: 17 },
          { selector: '.prose blockquote', baseFontSize: 18 },
          { selector: '.prose code', baseFontSize: 14 },
        ];
        
        // Remove existing dynamic styles
        const existingStyle = document.getElementById('dynamic-font-sizes');
        if (existingStyle) {
          existingStyle.remove();
        }
        
        // Create new dynamic styles
        const style = document.createElement('style');
        style.id = 'dynamic-font-sizes';
        let css = '';
        
        elements.forEach(({ selector, baseFontSize }) => {
          const newSize = baseFontSize * scaleFactor;
          css += `${selector} { font-size: ${newSize}px !important; }\n`;
        });
        
        style.textContent = css;
        document.head.appendChild(style);
      }
    };

    controller.init();
  }

  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initColorController);
  } else {
    initColorController();
  }
</script>

<style>
  /* Custom slider styling */
  .slider::-webkit-slider-thumb {
    appearance: none;
    height: 16px;
    width: 16px;
    border-radius: 50%;
    background: var(--color-primary-400);
    cursor: pointer;
    border: 2px solid #fff;
    box-shadow: 0 2px 4px rgba(0,0,0,0.2);
  }

  .slider::-moz-range-thumb {
    height: 16px;
    width: 16px;
    border-radius: 50%;
    background: var(--color-primary-400);
    cursor: pointer;
    border: 2px solid #fff;
    box-shadow: 0 2px 4px rgba(0,0,0,0.2);
  }

  details[open] summary {
    margin-bottom: 1rem;
  }

  details summary::-webkit-details-marker {
    display: none;
  }

  details summary::-moz-details-marker {
    display: none;
  }

  details summary::marker {
    display: none;
  }

  details summary {
    list-style: none;
    outline: none;
  }

  details summary::before {
    content: '▶';
    margin-right: 0.5rem;
    transition: transform 0.2s;
  }

  details[open] summary::before {
    transform: rotate(90deg);
  }
</style>
