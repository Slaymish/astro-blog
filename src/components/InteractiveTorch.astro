---
// InteractiveTor<!-- Hidden content that gets revealed by the torch -->
<div class="hidden-content">
  <!-- Cute pixel art cats that scroll with the page -->
  <div class="hidden-item" data-reveal-distance="80" data-cat-type="orange" style="top: 300px; left: 15%;">
    <div class="pixel-cat orange-cat">
      <div class="cat-ears">
        <div class="ear left"></div>
        <div class="ear right"></div>
      </div>
      <div class="cat-head">
        <div class="eye left"></div>
        <div class="eye right"></div>
        <div class="nose"></div>
        <div class="mouth"></div>
      </div>
      <div class="cat-body">
        <div class="stripe"></div>
        <div class="stripe"></div>
      </div>
      <div class="cat-tail"></div>
    </div>
  </div>
  
  <div class="hidden-item" data-reveal-distance="80" data-cat-type="gray" style="top: 600px; right: 20%;">
    <div class="pixel-cat gray-cat">
      <div class="cat-ears">
        <div class="ear left"></div>
        <div class="ear right"></div>
      </div>
      <div class="cat-head">
        <div class="eye left"></div>
        <div class="eye right"></div>
        <div class="nose"></div>
        <div class="mouth"></div>
      </div>
      <div class="cat-body">
        <div class="spot"></div>
      </div>
      <div class="cat-tail"></div>
    </div>
  </div>
  
  <div class="hidden-item" data-reveal-distance="80" data-cat-type="black" style="top: 900px; left: 25%;">
    <div class="pixel-cat black-cat">
      <div class="cat-ears">
        <div class="ear left"></div>
        <div class="ear right"></div>
      </div>
      <div class="cat-head">
        <div class="eye left"></div>
        <div class="eye right"></div>
        <div class="nose"></div>
        <div class="mouth"></div>
      </div>
      <div class="cat-body"></div>
      <div class="cat-tail"></div>
    </div>
  </div>
  
  <div class="hidden-item" data-reveal-distance="80" data-cat-type="white" style="top: 1200px; right: 15%;">
    <div class="pixel-cat white-cat">
      <div class="cat-ears">
        <div class="ear left"></div>
        <div class="ear right"></div>
      </div>
      <div class="cat-head">
        <div class="eye left"></div>
        <div class="eye right"></div>
        <div class="nose"></div>
        <div class="mouth"></div>
      </div>
      <div class="cat-body">
        <div class="heart"></div>
      </div>
      <div class="cat-tail"></div>
    </div>
  </div>
</div>ive torch that reveals hidden content
---

<div id="torch-container" class="torch-container">
  <!-- Torch icon that can be picked up -->
  <div id="torch" class="torch" data-picked-up="false">
    <div class="torch-handle"></div>
    <div class="torch-flame">
      <div class="flame-inner"></div>
      <div class="flame-outer"></div>
    </div>
  </div>
  
  <!-- Light effect that follows the torch -->
  <div id="torch-light" class="torch-light"></div>
  
  <!-- Overlay to create the darkness effect -->
  <div id="darkness-overlay" class="darkness-overlay"></div>
</div>

<!-- Hidden content that gets revealed by the torch -->
<div class="hidden-content">
  <!-- Just a few cute cats scattered around -->
  <div class="hidden-item" data-reveal-distance="80" style="top: 25%; left: 20%;">
    <div class="hidden-cat">üê±</div>
  </div>
  
  <div class="hidden-item" data-reveal-distance="80" style="top: 60%; right: 25%;">
    <div class="hidden-cat">üò∏</div>
  </div>
  
  <div class="hidden-item" data-reveal-distance="80" style="top: 40%; left: 70%;">
    <div class="hidden-cat">ÔøΩ</div>
  </div>
  
  <div class="hidden-item" data-reveal-distance="80" style="top: 75%; left: 40%;">
    <div class="hidden-cat">üêà</div>
  </div>
</div>

<style>
  .torch-container {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    pointer-events: none;
    z-index: 1000;
  }

  .torch {
    position: absolute;
    top: 20px;
    right: 20px;
    width: 32px;
    height: 48px;
    cursor: grab;
    pointer-events: auto;
    z-index: 1002;
    transition: transform 0.2s ease;
    opacity: 0.7;
  }

  .torch:hover {
    transform: scale(1.05);
    opacity: 1;
  }

  .torch.dragging {
    cursor: grabbing;
    transform: scale(1.2);
    z-index: 1003;
  }

  .torch-handle {
    width: 10px;
    height: 28px;
    background: linear-gradient(to bottom, #8B4513, #654321);
    border-radius: 5px;
    margin: 0 auto;
    position: relative;
  }

  .torch-flame {
    position: absolute;
    top: -12px;
    left: 50%;
    transform: translateX(-50%);
    width: 20px;
    height: 20px;
  }

  .flame-outer {
    position: absolute;
    width: 20px;
    height: 20px;
    background: radial-gradient(circle, 
      rgba(255, 165, 0, 0.8) 0%, 
      rgba(255, 69, 0, 0.7) 40%, 
      rgba(220, 20, 60, 0.5) 70%, 
      transparent 100%);
    border-radius: 50% 50% 50% 50% / 60% 60% 40% 40%;
    animation: flicker 1.5s ease-in-out infinite alternate;
  }

  .flame-inner {
    position: absolute;
    top: 2px;
    left: 50%;
    transform: translateX(-50%);
    width: 12px;
    height: 12px;
    background: radial-gradient(circle, 
      rgba(255, 255, 0, 0.7) 0%, 
      rgba(255, 165, 0, 0.5) 60%, 
      transparent 100%);
    border-radius: 50% 50% 50% 50% / 60% 60% 40% 40%;
    animation: flicker-inner 1s ease-in-out infinite alternate;
  }

  @keyframes flicker {
    0% { 
      transform: translateX(-50%) scale(1) rotate(-1deg);
      opacity: 0.9;
    }
    100% { 
      transform: translateX(-50%) scale(1.05) rotate(1deg);
      opacity: 1;
    }
  }

  @keyframes flicker-inner {
    0% { 
      transform: translateX(-50%) scale(0.9);
      opacity: 0.8;
    }
    100% { 
      transform: translateX(-50%) scale(1.1);
      opacity: 1;
    }
  }

  .torch-light {
    position: absolute;
    width: 160px;
    height: 160px;
    background: radial-gradient(circle, 
      rgba(255, 220, 100, 0.2) 0%, 
      rgba(255, 165, 0, 0.15) 30%, 
      rgba(255, 69, 0, 0.08) 60%, 
      transparent 100%);
    border-radius: 50%;
    pointer-events: none;
    opacity: 0;
    transition: opacity 0.3s ease;
    z-index: 1001;
    transform: translate(-50%, -50%);
  }

  .torch-light.active {
    opacity: 1;
    animation: glow 2s ease-in-out infinite alternate;
  }

  @keyframes glow {
    0% { 
      transform: translate(-50%, -50%) scale(0.95);
      opacity: 0.8;
    }
    100% { 
      transform: translate(-50%, -50%) scale(1.05);
      opacity: 1;
    }
  }

  .darkness-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    background: rgba(0, 0, 0, 0);
    pointer-events: none;
    opacity: 0;
    transition: opacity 0.5s ease;
    z-index: 999;
  }

  .darkness-overlay.active {
    opacity: 1;
  }

  .hidden-content {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    pointer-events: none;
    z-index: 1001;
  }

  .hidden-item {
    position: absolute;
    opacity: 0;
    transform: scale(0.5);
    transition: all 0.4s cubic-bezier(0.68, -0.55, 0.265, 1.55);
    pointer-events: none;
  }

  .hidden-item.revealed {
    opacity: 1;
    transform: scale(1);
    animation: sparkle 0.6s ease-out;
  }

  .hidden-item.discovered {
    opacity: 0.6;
    transform: scale(0.9);
  }

  @keyframes sparkle {
    0% { 
      transform: scale(0.5) rotate(0deg);
    }
    50% { 
      transform: scale(1.3) rotate(10deg);
    }
    100% { 
      transform: scale(1) rotate(0deg);
    }
  }

  .hidden-cat {
    font-size: 2.5rem;
    text-align: center;
    filter: drop-shadow(0 0 8px rgba(255, 255, 255, 0.3));
    cursor: default;
  }

  .hidden-cat:hover {
    transform: scale(1.1);
  }

  /* Pixel Art Cats */
  .pixel-cat {
    position: relative;
    width: 40px;
    height: 40px;
    image-rendering: pixelated;
    image-rendering: -moz-crisp-edges;
    image-rendering: crisp-edges;
    cursor: default;
    transition: transform 0.2s ease;
  }

  .pixel-cat:hover {
    transform: scale(1.1);
  }

  .cat-ears {
    position: absolute;
    top: 0;
    left: 50%;
    transform: translateX(-50%);
  }

  .ear {
    position: absolute;
    width: 6px;
    height: 6px;
    top: -2px;
  }

  .ear.left {
    left: -8px;
    transform: rotate(-45deg);
  }

  .ear.right {
    right: -8px;
    transform: rotate(45deg);
  }

  .cat-head {
    position: absolute;
    width: 20px;
    height: 16px;
    top: 2px;
    left: 50%;
    transform: translateX(-50%);
    border-radius: 8px 8px 6px 6px;
  }

  .eye {
    position: absolute;
    width: 2px;
    height: 2px;
    background: #000;
    border-radius: 1px;
    top: 4px;
  }

  .eye.left {
    left: 4px;
  }

  .eye.right {
    right: 4px;
  }

  .nose {
    position: absolute;
    width: 2px;
    height: 1px;
    background: #ff69b4;
    top: 7px;
    left: 50%;
    transform: translateX(-50%);
  }

  .mouth {
    position: absolute;
    width: 6px;
    height: 1px;
    top: 9px;
    left: 50%;
    transform: translateX(-50%);
    border-bottom: 1px solid #000;
    border-radius: 0 0 3px 3px;
  }

  .cat-body {
    position: absolute;
    width: 16px;
    height: 20px;
    top: 16px;
    left: 50%;
    transform: translateX(-50%);
    border-radius: 4px;
  }

  .cat-tail {
    position: absolute;
    width: 3px;
    height: 12px;
    top: 18px;
    right: 2px;
    border-radius: 2px;
    transform: rotate(20deg);
  }

  /* Orange Cat */
  .orange-cat .ear {
    background: #ff8c42;
    border: 1px solid #e67e22;
  }

  .orange-cat .cat-head {
    background: #ff8c42;
    border: 1px solid #e67e22;
  }

  .orange-cat .cat-body {
    background: #ff8c42;
    border: 1px solid #e67e22;
  }

  .orange-cat .cat-tail {
    background: #ff8c42;
    border: 1px solid #e67e22;
  }

  .orange-cat .stripe {
    position: absolute;
    width: 12px;
    height: 2px;
    background: #e67e22;
    left: 2px;
  }

  .orange-cat .stripe:first-child {
    top: 4px;
  }

  .orange-cat .stripe:last-child {
    top: 8px;
  }

  /* Gray Cat */
  .gray-cat .ear {
    background: #95a5a6;
    border: 1px solid #7f8c8d;
  }

  .gray-cat .cat-head {
    background: #95a5a6;
    border: 1px solid #7f8c8d;
  }

  .gray-cat .cat-body {
    background: #95a5a6;
    border: 1px solid #7f8c8d;
  }

  .gray-cat .cat-tail {
    background: #95a5a6;
    border: 1px solid #7f8c8d;
  }

  .gray-cat .spot {
    position: absolute;
    width: 4px;
    height: 4px;
    background: #7f8c8d;
    border-radius: 2px;
    top: 6px;
    left: 6px;
  }

  /* Black Cat */
  .black-cat .ear {
    background: #2c3e50;
    border: 1px solid #1a1a1a;
  }

  .black-cat .cat-head {
    background: #2c3e50;
    border: 1px solid #1a1a1a;
  }

  .black-cat .cat-body {
    background: #2c3e50;
    border: 1px solid #1a1a1a;
  }

  .black-cat .cat-tail {
    background: #2c3e50;
    border: 1px solid #1a1a1a;
  }

  .black-cat .eye {
    background: #f1c40f;
  }

  /* White Cat */
  .white-cat .ear {
    background: #ecf0f1;
    border: 1px solid #bdc3c7;
  }

  .white-cat .cat-head {
    background: #ecf0f1;
    border: 1px solid #bdc3c7;
  }

  .white-cat .cat-body {
    background: #ecf0f1;
    border: 1px solid #bdc3c7;
  }

  .white-cat .cat-tail {
    background: #ecf0f1;
    border: 1px solid #bdc3c7;
  }

  .white-cat .heart {
    position: absolute;
    width: 6px;
    height: 6px;
    top: 7px;
    left: 5px;
  }

  .white-cat .heart::before {
    content: '';
    position: absolute;
    width: 3px;
    height: 3px;
    background: #e74c3c;
    border-radius: 50%;
    top: 0;
    left: 0;
  }

  .white-cat .heart::after {
    content: '';
    position: absolute;
    width: 3px;
    height: 3px;
    background: #e74c3c;
    border-radius: 50%;
    top: 0;
    right: 0;
  }

  /* Responsive adjustments */
  @media (max-width: 768px) {
    .torch {
      top: 15px;
      right: 15px;
      width: 35px;
      height: 50px;
    }
    
    .torch-light {
      width: 150px;
      height: 150px;
    }
    
    .hidden-cat {
      font-size: 2rem;
    }
  }

  /* Instructions for first-time users */
  .torch-instructions {
    position: fixed;
    top: 80px;
    right: 20px;
    background: rgba(0, 0, 0, 0.7);
    color: white;
    padding: 8px 12px;
    border-radius: 8px;
    font-size: 0.75rem;
    z-index: 1004;
    opacity: 0;
    transform: translateY(-10px);
    transition: all 0.3s ease;
    pointer-events: none;
  }

  .torch-instructions.show {
    opacity: 1;
    transform: translateY(0);
  }

  .torch-instructions::before {
    content: '';
    position: absolute;
    top: -8px;
    right: 20px;
    width: 0;
    height: 0;
    border-left: 8px solid transparent;
    border-right: 8px solid transparent;
    border-bottom: 8px solid rgba(0, 0, 0, 0.8);
  }
</style>

<div id="torch-instructions" class="torch-instructions">
  üî¶ Find the hidden cats!
</div>

<script>
  function initTorch() {
    const torch = document.getElementById('torch');
    const torchLight = document.getElementById('torch-light');
    const darknessOverlay = document.getElementById('darkness-overlay');
    const hiddenItems = document.querySelectorAll('.hidden-item'); // This will get all hidden items from both components
    const instructions = document.getElementById('torch-instructions');
    
    if (!torch || !torchLight || !darknessOverlay || !instructions) return;
    
    let isDragging = false;
    let startX: number, startY: number;
    let foundItems = new Set<Element>();
    let allCatsFound = false;
    
    // Show instructions on first visit (smaller, less intrusive)
    const hasSeenTorch = localStorage.getItem('torch-tutorial-seen');
    if (!hasSeenTorch) {
      setTimeout(() => {
        instructions.classList.add('show');
        setTimeout(() => {
          instructions.classList.remove('show');
          localStorage.setItem('torch-tutorial-seen', 'true');
        }, 2000); // Shorter display time
      }, 1000);
    }

    // Mouse events
    torch.addEventListener('mousedown', startDrag);
    document.addEventListener('mousemove', drag);
    document.addEventListener('mouseup', stopDrag);
    
    // Touch events for mobile
    torch.addEventListener('touchstart', startDragTouch, { passive: false });
    document.addEventListener('touchmove', dragTouch, { passive: false });
    document.addEventListener('touchend', stopDrag);

    function startDrag(e: MouseEvent) {
      if (!torch) return;
      
      isDragging = true;
      torch.classList.add('dragging');
      torch.setAttribute('data-picked-up', 'true');
      
      const rect = torch.getBoundingClientRect();
      startX = e.clientX - rect.left;
      startY = e.clientY - rect.top;
      
      // Activate torch effects
      activateTorch();
      
      e.preventDefault();
    }

    function startDragTouch(e: TouchEvent) {
      const touch = e.touches[0];
      const mouseEvent = new MouseEvent('mousedown', {
        clientX: touch.clientX,
        clientY: touch.clientY
      });
      startDrag(mouseEvent);
      e.preventDefault();
    }

    function drag(e: MouseEvent) {
      if (!isDragging || !torch) return;
      
      const x = e.clientX - startX;
      const y = e.clientY - startY;
      
      // Keep torch within viewport
      const maxX = window.innerWidth - torch.offsetWidth;
      const maxY = window.innerHeight - torch.offsetHeight;
      const boundedX = Math.max(0, Math.min(x, maxX));
      const boundedY = Math.max(0, Math.min(y, maxY));
      
      torch.style.left = boundedX + 'px';
      torch.style.top = boundedY + 'px';
      torch.style.right = 'auto';
      
      // Update light position
      updateLightPosition(e.clientX, e.clientY);
      
      // Check for hidden items
      checkHiddenItems(e.clientX, e.clientY);
      
      e.preventDefault();
    }

    function dragTouch(e: TouchEvent) {
      if (!isDragging) return;
      const touch = e.touches[0];
      const mouseEvent = new MouseEvent('mousemove', {
        clientX: touch.clientX,
        clientY: touch.clientY
      });
      drag(mouseEvent);
      e.preventDefault();
    }

    function stopDrag() {
      if (!isDragging || !torch) return;
      
      isDragging = false;
      torch.classList.remove('dragging');
      
      // If torch is dropped back near original position, reset
      const rect = torch.getBoundingClientRect();
      const originalX = window.innerWidth - 60; // Approximate original position
      const originalY = 20;
      
      if (Math.abs(rect.left - originalX) < 50 && Math.abs(rect.top - originalY) < 50) {
        resetTorch();
      }
    }

    function activateTorch() {
      if (!darknessOverlay || !torchLight) return;
      darknessOverlay.classList.add('active');
      torchLight.classList.add('active');
    }

    function resetTorch() {
      if (!torch || !darknessOverlay || !torchLight) return;
      torch.setAttribute('data-picked-up', 'false');
      torch.style.left = '';
      torch.style.top = '';
      torch.style.right = '20px';
      
      darknessOverlay.classList.remove('active');
      torchLight.classList.remove('active');
      
      // Properly reset all cats
      foundItems.clear();
      allCatsFound = false;
      hiddenItems.forEach(item => {
        item.classList.remove('revealed');
        item.classList.remove('discovered');
      });
      
      // Hide reset message if showing
      const resetMsg = document.querySelector('.reset-message');
      if (resetMsg) resetMsg.remove();
    }

    function updateLightPosition(x: number, y: number) {
      if (!torchLight) return;
      torchLight.style.left = x + 'px';
      torchLight.style.top = y + 'px';
    }

    function checkHiddenItems(torchX: number, torchY: number) {
      hiddenItems.forEach(item => {
        const rect = item.getBoundingClientRect();
        const itemCenterX = rect.left + rect.width / 2;
        const itemCenterY = rect.top + rect.height / 2;
        
        const distance = Math.sqrt(
          Math.pow(torchX - itemCenterX, 2) + 
          Math.pow(torchY - itemCenterY, 2)
        );
        
        const revealDistance = parseInt((item as HTMLElement).dataset.revealDistance || '80');
        
        if (distance < revealDistance) {
          if (!item.classList.contains('revealed') && !foundItems.has(item)) {
            item.classList.add('revealed');
            foundItems.add(item);
            
            // Play different meow sound based on cat type
            const catType = (item as HTMLElement).dataset.catType || 'default';
            playMeowSound(catType);
            
            // Check if all cats are found
            if (foundItems.size === hiddenItems.length) {
              allCatsFound = true;
              setTimeout(() => {
                showResetMessage();
              }, 1000);
            }
          }
        }
      });
    }

    function playMeowSound(catType: string) {
      try {
        const audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();
        const oscillator = audioContext.createOscillator();
        const gainNode = audioContext.createGain();
        
        oscillator.connect(gainNode);
        gainNode.connect(audioContext.destination);
        
        // Different meow patterns for different cat types
        switch (catType) {
          case 'orange':
            // Deep, friendly meow
            oscillator.frequency.setValueAtTime(300, audioContext.currentTime);
            oscillator.frequency.linearRampToValueAtTime(500, audioContext.currentTime + 0.1);
            oscillator.frequency.linearRampToValueAtTime(250, audioContext.currentTime + 0.3);
            break;
          
          case 'gray':
            // Soft, gentle meow
            oscillator.frequency.setValueAtTime(450, audioContext.currentTime);
            oscillator.frequency.linearRampToValueAtTime(600, audioContext.currentTime + 0.08);
            oscillator.frequency.linearRampToValueAtTime(350, audioContext.currentTime + 0.25);
            break;
          
          case 'black':
            // Mysterious, lower meow
            oscillator.frequency.setValueAtTime(280, audioContext.currentTime);
            oscillator.frequency.linearRampToValueAtTime(450, audioContext.currentTime + 0.12);
            oscillator.frequency.linearRampToValueAtTime(200, audioContext.currentTime + 0.35);
            break;
          
          case 'white':
            // High, cute meow
            oscillator.frequency.setValueAtTime(500, audioContext.currentTime);
            oscillator.frequency.linearRampToValueAtTime(750, audioContext.currentTime + 0.06);
            oscillator.frequency.linearRampToValueAtTime(400, audioContext.currentTime + 0.2);
            break;
          
          default:
            // Default meow
            oscillator.frequency.setValueAtTime(400, audioContext.currentTime);
            oscillator.frequency.linearRampToValueAtTime(600, audioContext.currentTime + 0.1);
            oscillator.frequency.linearRampToValueAtTime(300, audioContext.currentTime + 0.2);
        }
        
        gainNode.gain.setValueAtTime(0, audioContext.currentTime);
        gainNode.gain.linearRampToValueAtTime(0.1, audioContext.currentTime + 0.01);
        gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.4);
        
        oscillator.start(audioContext.currentTime);
        oscillator.stop(audioContext.currentTime + 0.4);
      } catch (e) {
        // Silently fail if audio context isn't available
      }
    }

    function showResetMessage() {
      const message = document.createElement('div');
      message.className = 'reset-message';
      message.innerHTML = 'üéâ All cats found! Press "R" to reset and find them again! üê±';
      message.style.cssText = `
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background: rgba(0, 0, 0, 0.9);
        color: white;
        padding: 20px 30px;
        border-radius: 15px;
        font-size: 1.1rem;
        font-weight: 600;
        text-align: center;
        z-index: 1010;
        animation: fadeIn 0.5s ease-out;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
        border: 3px solid #ff8c42;
      `;
      
      document.body.appendChild(message);
      
      // Auto-remove after 5 seconds
      setTimeout(() => {
        if (message.parentNode) {
          message.style.animation = 'fadeOut 0.5s ease-in forwards';
          setTimeout(() => message.remove(), 500);
        }
      }, 5000);
    }

    // Simple animation for particle burst (keeping this minimal)
    const style = document.createElement('style');
    style.textContent = `
      @keyframes particle-burst {
        0% {
          transform: translate(0, 0) scale(1);
          opacity: 1;
        }
        100% {
          transform: translate(var(--end-x), var(--end-y)) scale(0);
          opacity: 0;
        }
      }
      
      @keyframes fadeIn {
        0% {
          opacity: 0;
          transform: translate(-50%, -50%) scale(0.8);
        }
        100% {
          opacity: 1;
          transform: translate(-50%, -50%) scale(1);
        }
      }
      
      @keyframes fadeOut {
        0% {
          opacity: 1;
          transform: translate(-50%, -50%) scale(1);
        }
        100% {
          opacity: 0;
          transform: translate(-50%, -50%) scale(0.8);
        }
      }
    `;
    document.head.appendChild(style);

    // Add keyboard shortcut to reset torch
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' || e.key === 'r' || e.key === 'R') {
        resetTorch();
      }
    });
  }

  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initTorch);
  } else {
    initTorch();
  }
</script>
